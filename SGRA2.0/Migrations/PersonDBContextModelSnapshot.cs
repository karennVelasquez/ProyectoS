// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGRA2._0.Context;

#nullable disable

namespace SGRA2._0.Migrations
{
    [DbContext(typeof(PersonDBContext))]
    partial class PersonDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SGRA2._0.Model.Achievements", b =>
                {
                    b.Property<int>("IdAchievements")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAchievements"));

                    b.Property<string>("Achievement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAchievements");

                    b.ToTable("achievements");
                });

            modelBuilder.Entity("SGRA2._0.Model.AchievementsGames", b =>
                {
                    b.Property<int>("IdAchievementsG")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAchievementsG"));

                    b.Property<int>("AchievementsIdAchievements")
                        .HasColumnType("int");

                    b.Property<int>("GamesIdGames")
                        .HasColumnType("int");

                    b.Property<int>("IdAchievements")
                        .HasColumnType("int");

                    b.Property<int>("IdGames")
                        .HasColumnType("int");

                    b.HasKey("IdAchievementsG");

                    b.HasIndex("AchievementsIdAchievements");

                    b.HasIndex("GamesIdGames");

                    b.ToTable("achievementsGames");
                });

            modelBuilder.Entity("SGRA2._0.Model.ChemicalComposition", b =>
                {
                    b.Property<int>("IdChemicalComposition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdChemicalComposition"));

                    b.Property<string>("Chemical_Composition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdWaste")
                        .HasColumnType("int");

                    b.Property<int>("WasteIdWaste")
                        .HasColumnType("int");

                    b.HasKey("IdChemicalComposition");

                    b.HasIndex("WasteIdWaste");

                    b.ToTable("chemicalCompositions");
                });

            modelBuilder.Entity("SGRA2._0.Model.CollectWaste", b =>
                {
                    b.Property<int>("IdCollectWaste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCollectWaste"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ComposterIdComposter")
                        .HasColumnType("int");

                    b.Property<int>("IdComposter")
                        .HasColumnType("int");

                    b.Property<int>("IdSuppliers")
                        .HasColumnType("int");

                    b.Property<int>("SuppliersIdSuppliers")
                        .HasColumnType("int");

                    b.HasKey("IdCollectWaste");

                    b.HasIndex("ComposterIdComposter");

                    b.HasIndex("SuppliersIdSuppliers");

                    b.ToTable("collectWastes");
                });

            modelBuilder.Entity("SGRA2._0.Model.Composter", b =>
                {
                    b.Property<int>("IdComposter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComposter"));

                    b.Property<string>("DrainageSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdComposter");

                    b.ToTable("composters");
                });

            modelBuilder.Entity("SGRA2._0.Model.Customer", b =>
                {
                    b.Property<int>("IdCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCustomer"));

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("PersonIdPerson")
                        .HasColumnType("int");

                    b.HasKey("IdCustomer");

                    b.HasIndex("PersonIdPerson");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("SGRA2._0.Model.DocumentType", b =>
                {
                    b.Property<int>("IdDocumentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDocumentType"));

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDocumentType");

                    b.ToTable("documentTypes");
                });

            modelBuilder.Entity("SGRA2._0.Model.Employee", b =>
                {
                    b.Property<int>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmployee"));

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("PersonIdPerson")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmployee");

                    b.HasIndex("PersonIdPerson");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("SGRA2._0.Model.FinalCompost", b =>
                {
                    b.Property<int>("IdFinalCompost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFinalCompost"));

                    b.Property<string>("FinalPh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HumidityLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdWaste")
                        .HasColumnType("int");

                    b.Property<string>("Nutrients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WasteIdWaste")
                        .HasColumnType("int");

                    b.HasKey("IdFinalCompost");

                    b.HasIndex("WasteIdWaste");

                    b.ToTable("finalComposts");
                });

            modelBuilder.Entity("SGRA2._0.Model.Flip", b =>
                {
                    b.Property<int>("IdFlip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFlip"));

                    b.Property<int>("Flipfrequency")
                        .HasColumnType("int");

                    b.Property<int>("IdWaste")
                        .HasColumnType("int");

                    b.Property<string>("UniformedDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WasteIdWaste")
                        .HasColumnType("int");

                    b.HasKey("IdFlip");

                    b.HasIndex("WasteIdWaste");

                    b.ToTable("flips");
                });

            modelBuilder.Entity("SGRA2._0.Model.Games", b =>
                {
                    b.Property<int>("IdGames")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGames"));

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("LevelIdLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdGames");

                    b.HasIndex("LevelIdLevel");

                    b.HasIndex("UserIdUser");

                    b.ToTable("games");
                });

            modelBuilder.Entity("SGRA2._0.Model.Level", b =>
                {
                    b.Property<int>("IdLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLevel"));

                    b.Property<int>("NumLevel")
                        .HasColumnType("int");

                    b.HasKey("IdLevel");

                    b.ToTable("levels");
                });

            modelBuilder.Entity("SGRA2._0.Model.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerson"));

                    b.Property<int>("Document")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypeIdDocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPerson");

                    b.HasIndex("DocumentTypeIdDocumentType");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("SGRA2._0.Model.ProcessStage", b =>
                {
                    b.Property<int>("IdProcessStage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProcessStage"));

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProcessStage");

                    b.ToTable("processStages");
                });

            modelBuilder.Entity("SGRA2._0.Model.RecordTime", b =>
                {
                    b.Property<int>("IdRecordTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRecordTime"));

                    b.Property<int>("AmountCollected")
                        .HasColumnType("int");

                    b.Property<DateTime>("Collecttime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLevel")
                        .HasColumnType("int");

                    b.Property<int>("IdWaste")
                        .HasColumnType("int");

                    b.Property<int>("LevelIdLevel")
                        .HasColumnType("int");

                    b.Property<int>("WasteIdWaste")
                        .HasColumnType("int");

                    b.HasKey("IdRecordTime");

                    b.HasIndex("LevelIdLevel");

                    b.HasIndex("WasteIdWaste");

                    b.ToTable("recordTimes");
                });

            modelBuilder.Entity("SGRA2._0.Model.Sale", b =>
                {
                    b.Property<int>("IdSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSale"));

                    b.Property<int>("CustomerIdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdSale");

                    b.HasIndex("CustomerIdCustomer");

                    b.ToTable("sales");
                });

            modelBuilder.Entity("SGRA2._0.Model.Score", b =>
                {
                    b.Property<int>("IdPuntaje")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPuntaje"));

                    b.Property<int>("GamesIdGames")
                        .HasColumnType("int");

                    b.Property<int>("IdGames")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("NumScore")
                        .HasColumnType("int");

                    b.Property<int>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdPuntaje");

                    b.HasIndex("GamesIdGames");

                    b.HasIndex("UserIdUser");

                    b.ToTable("scores");
                });

            modelBuilder.Entity("SGRA2._0.Model.Suppliers", b =>
                {
                    b.Property<int>("IdSuppliers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSuppliers"));

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("IdWasteType")
                        .HasColumnType("int");

                    b.Property<int>("PersonIdPerson")
                        .HasColumnType("int");

                    b.Property<int>("WasteTypeIdWasteType")
                        .HasColumnType("int");

                    b.HasKey("IdSuppliers");

                    b.HasIndex("PersonIdPerson");

                    b.HasIndex("WasteTypeIdWasteType");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("SGRA2._0.Model.Temperature", b =>
                {
                    b.Property<int>("IdTemperature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTemperature"));

                    b.Property<string>("Decompositiontemperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdWaste")
                        .HasColumnType("int");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WasteIdWaste")
                        .HasColumnType("int");

                    b.HasKey("IdTemperature");

                    b.HasIndex("WasteIdWaste");

                    b.ToTable("temperatures");
                });

            modelBuilder.Entity("SGRA2._0.Model.Time", b =>
                {
                    b.Property<int>("IdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTime"));

                    b.Property<int>("EtapProcessStageaProcesoIdProcessStage")
                        .HasColumnType("int");

                    b.Property<int>("IdProcessStage")
                        .HasColumnType("int");

                    b.Property<int>("IdWaste")
                        .HasColumnType("int");

                    b.Property<int>("Processduration")
                        .HasColumnType("int");

                    b.Property<int>("WasteIdWaste")
                        .HasColumnType("int");

                    b.HasKey("IdTime");

                    b.HasIndex("EtapProcessStageaProcesoIdProcessStage");

                    b.HasIndex("WasteIdWaste");

                    b.ToTable("times");
                });

            modelBuilder.Entity("SGRA2._0.Model.Transaction", b =>
                {
                    b.Property<int>("IdTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTransaction"));

                    b.Property<DateTime>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveredQuantity")
                        .HasColumnType("int");

                    b.Property<int>("IdSuppliers")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuppliersIdSuppliers")
                        .HasColumnType("int");

                    b.HasKey("IdTransaction");

                    b.HasIndex("SuppliersIdSuppliers");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("SGRA2._0.Model.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("users");
                });

            modelBuilder.Entity("SGRA2._0.Model.Waste", b =>
                {
                    b.Property<int>("IdWaste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWaste"));

                    b.Property<string>("Humidity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdWasteType")
                        .HasColumnType("int");

                    b.Property<int>("WasteTypeIdWasteType")
                        .HasColumnType("int");

                    b.HasKey("IdWaste");

                    b.HasIndex("WasteTypeIdWasteType");

                    b.ToTable("wastes");
                });

            modelBuilder.Entity("SGRA2._0.Model.WasteType", b =>
                {
                    b.Property<int>("IdWasteType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWasteType"));

                    b.Property<string>("Descomposition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Waste_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdWasteType");

                    b.ToTable("wasteTypes");
                });

            modelBuilder.Entity("SGRA2._0.Model.AchievementsGames", b =>
                {
                    b.HasOne("SGRA2._0.Model.Achievements", "Achievements")
                        .WithMany()
                        .HasForeignKey("AchievementsIdAchievements")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGRA2._0.Model.Games", "Games")
                        .WithMany()
                        .HasForeignKey("GamesIdGames")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Achievements");

                    b.Navigation("Games");
                });

            modelBuilder.Entity("SGRA2._0.Model.ChemicalComposition", b =>
                {
                    b.HasOne("SGRA2._0.Model.Waste", "Waste")
                        .WithMany()
                        .HasForeignKey("WasteIdWaste")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Waste");
                });

            modelBuilder.Entity("SGRA2._0.Model.CollectWaste", b =>
                {
                    b.HasOne("SGRA2._0.Model.Composter", "Composter")
                        .WithMany()
                        .HasForeignKey("ComposterIdComposter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGRA2._0.Model.Suppliers", "Suppliers")
                        .WithMany()
                        .HasForeignKey("SuppliersIdSuppliers")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Composter");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("SGRA2._0.Model.Customer", b =>
                {
                    b.HasOne("SGRA2._0.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonIdPerson")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SGRA2._0.Model.Employee", b =>
                {
                    b.HasOne("SGRA2._0.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonIdPerson")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SGRA2._0.Model.FinalCompost", b =>
                {
                    b.HasOne("SGRA2._0.Model.Waste", "Waste")
                        .WithMany()
                        .HasForeignKey("WasteIdWaste")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Waste");
                });

            modelBuilder.Entity("SGRA2._0.Model.Flip", b =>
                {
                    b.HasOne("SGRA2._0.Model.Waste", "Waste")
                        .WithMany()
                        .HasForeignKey("WasteIdWaste")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Waste");
                });

            modelBuilder.Entity("SGRA2._0.Model.Games", b =>
                {
                    b.HasOne("SGRA2._0.Model.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelIdLevel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGRA2._0.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SGRA2._0.Model.Person", b =>
                {
                    b.HasOne("SGRA2._0.Model.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeIdDocumentType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("SGRA2._0.Model.RecordTime", b =>
                {
                    b.HasOne("SGRA2._0.Model.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelIdLevel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGRA2._0.Model.Waste", "Waste")
                        .WithMany()
                        .HasForeignKey("WasteIdWaste")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Waste");
                });

            modelBuilder.Entity("SGRA2._0.Model.Sale", b =>
                {
                    b.HasOne("SGRA2._0.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerIdCustomer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SGRA2._0.Model.Score", b =>
                {
                    b.HasOne("SGRA2._0.Model.Games", "Games")
                        .WithMany()
                        .HasForeignKey("GamesIdGames")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGRA2._0.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Games");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SGRA2._0.Model.Suppliers", b =>
                {
                    b.HasOne("SGRA2._0.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonIdPerson")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGRA2._0.Model.WasteType", "WasteType")
                        .WithMany()
                        .HasForeignKey("WasteTypeIdWasteType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("WasteType");
                });

            modelBuilder.Entity("SGRA2._0.Model.Temperature", b =>
                {
                    b.HasOne("SGRA2._0.Model.Waste", "Waste")
                        .WithMany()
                        .HasForeignKey("WasteIdWaste")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Waste");
                });

            modelBuilder.Entity("SGRA2._0.Model.Time", b =>
                {
                    b.HasOne("SGRA2._0.Model.ProcessStage", "EtapProcessStageaProceso")
                        .WithMany()
                        .HasForeignKey("EtapProcessStageaProcesoIdProcessStage")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGRA2._0.Model.Waste", "Waste")
                        .WithMany()
                        .HasForeignKey("WasteIdWaste")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EtapProcessStageaProceso");

                    b.Navigation("Waste");
                });

            modelBuilder.Entity("SGRA2._0.Model.Transaction", b =>
                {
                    b.HasOne("SGRA2._0.Model.Suppliers", "Suppliers")
                        .WithMany()
                        .HasForeignKey("SuppliersIdSuppliers")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("SGRA2._0.Model.Waste", b =>
                {
                    b.HasOne("SGRA2._0.Model.WasteType", "WasteType")
                        .WithMany()
                        .HasForeignKey("WasteTypeIdWasteType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WasteType");
                });
#pragma warning restore 612, 618
        }
    }
}
